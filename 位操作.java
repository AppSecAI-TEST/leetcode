1、 判断一个数是否是2的方幂
n > 0 && ((n & (n - 1)) == 0 )
	解释((n & (n-1)) == 0)：
	如果A&B==0，表示A与B的二进制形式没有在同一个位置都为1的时候。

2. 求某一个数的二进制表示中1的个数
while (n >0 ) {
	      count ++;
		        n &= (n-1);
}
3. 计算N!的质因数2的个数。
容易得出N!质因数2的个数 = [N / 2] + [N / 4] + [N / 8] + ....
下面通过一个简单的例子来推导一下过程：N = 10101(二进制表示）
		现在我们跟踪最高位的1，不考虑其他位假定为0，
		则在
		[N / 2]    01000
		[N / 4]    00100
		[N / 8]    00010
		[N / 8]    00001
		则所有相加等于01111 = 10000 - 1
		由此推及其他位可得：(10101)!的质因数2的个数为10000 - 1 + 00100 - 1 + 00001 - 1 = 10101 - 3(二进制表示中1的个数)

int func(int n)
{
	 return n>0&&(n&(n-1))==0&&(n&0x55555555);
}
void main( )
{
	 printf("%d\n",func(4096)+func(8192)*10+func(16384)*100);
}
个人理解是这样n>0&&(n&(n-1))==0 用于判断是否为2的幂数 ，(n&0x55555555) 判断幂数的奇偶数
func(4096)+func(8192)*10+func(16384)*100
4096为2的12次幂，为偶数  boolean值成立 为1
8192为2的13次幂 ，为奇数  boolean值不成立  为0
16384为2的14次幂 ，为偶数  boolean成立 为1
1+0*10+1*100=101
